{"version":3,"sources":["FoodFinderHome.js","index.js"],"names":["productsList","FoodFinderHome","props","state","currentProduct","vendorMatches","isLoading","productName","this","setState","fetch","localUrl","then","res","json","data","console","log","catch","vendors","CircularProgress","Object","keys","length","InputLabel","map","key","index","ListItem","ListItemIcon","ListItemText","primary","secondary","price","quantity","Grid","container","direction","justify","alignItems","Typography","variant","gutterBottom","id","Autocomplete","options","style","width","justifyContent","onChange","event","newValue","selectedProduct","renderInput","params","TextField","List","getVendorList","React","Component","ReactDOM","render","document","getElementById"],"mappings":"sVAKIA,EAAe,CAAC,SAAU,UAAW,SAAU,QAAS,UAAW,SAAU,OAAQ,QAAS,cAAe,UAAW,OAAQ,eAAgB,QAAS,gBAAiB,OAAQ,OAAQ,QAAS,WAiFxLC,E,kDA3EX,WAAaC,GAAQ,IAAD,8BAChB,cAAMA,IACDC,MAAQ,CAAEC,eAAiB,GAAIC,cAAgB,GAAKC,WAAW,GAFpD,E,4DAIHC,GAAc,IAAD,OAC1BC,KAAKC,SAAU,CACXH,WAAY,IAGhBI,MAAMC,sCAA6BJ,GAClCK,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAACG,GACHC,QAAQC,IAAIF,GACd,EAAKN,SAAS,CAAEJ,cAAeU,EAAMX,eAAiBG,EAAaD,WAAY,OAEhFY,MAAMF,QAAQC,O,sCAIf,IAAIE,EAAUX,KAAKL,MAAME,cACzB,OAAGG,KAAKL,MAAMG,UACH,kBAACc,EAAA,EAAD,MAEJZ,KAAKL,MAAMC,eAGoB,IAAhCiB,OAAOC,KAAKH,GAASI,OACtB,kBAACC,EAAA,EAAD,6EAGDH,OAAOC,KAAKH,GAASM,KAAI,SAACC,EAAKC,GAAN,OACzB,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACA,kBAAC,IAAD,OAEA,kBAACC,EAAA,EAAD,CAAcC,QAASL,EAAKM,UAAW,WAAab,EAAQO,GAAKO,MAAQ,eAAiBd,EAAQO,GAAKQ,eAX1G,kBAACV,EAAA,EAAD,iC,+BAiBE,IAAD,OACN,OACI,kBAACW,EAAA,EAAD,CACRC,WAAS,EACTC,UAAU,SACVC,QAAQ,SACRC,WAAW,UAEb,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,cAAY,GAArC,cAGU,kBAAClB,EAAA,EAAD,CAAYmB,GAAG,4BAAf,sBAEA,kBAACC,EAAA,EAAD,CACID,GAAG,iBACHE,QAAS7C,EACT8C,MAAO,CAAEC,MAAO,IACZC,eAAgB,SAChBT,WAAY,UAChBU,SAAU,SAACC,EAAOC,GACd,EAAKC,gBAAgBD,IAEzBE,YAAa,SAACC,GAAD,OAAY,kBAACC,EAAA,EAAD,iBAAeD,EAAf,CAAuBb,QAAQ,iBAE5D,kBAACe,EAAA,EAAD,KACChD,KAAKiD,sB,GAnEWC,IAAMC,WCLnCC,IAASC,OAAO,kBAAC,EAAD,MAAoBC,SAASC,eAAe,W","file":"static/js/main.bf76b2c8.chunk.js","sourcesContent":["import React from 'react';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport { Grid, InputLabel, TextField, Container, List, ListItem, ListItemText, ListItemIcon, Typography, CircularProgress} from '@material-ui/core';\nimport ShoppingCartIcon from '@material-ui/icons/ShoppingCart';\n\nlet productsList = [\"Apples\", \"Bananas\", \"Butter\", \"Bread\", \"Carrots\", \"Cheese\", \"Eggs\", \"Flour\", \"Ground Beef\", \"Lettuce\", \"Milk\", \"Orange Juice\", \"Pasta\", \"Peanut Butter\", \"Rice\", \"Salt\", \"Sugar\", \"Spinach\"];\n\nconst cloudUrl = 'https://server-dot-ardent-fusion-279020.wl.r.appspot.com/';\nconst localUrl = 'http://localhost:8082/'; \n\nclass FoodFinderHome extends React.Component {\n    constructor (props) {\n        super(props);\n        this.state = { currentProduct : \"\", vendorMatches : { }, isLoading: false };\n    }\n    selectedProduct (productName) {\n        this.setState ({\n            isLoading : true\n        });\n\n        fetch(localUrl + 'find-product/' + productName)\n        .then(res => res.json())\n        .then((data) => {\n            console.log(data);\n          this.setState({ vendorMatches: data, currentProduct : productName, isLoading : false});\n        })\n        .catch(console.log);\n    };\n    \n    getVendorList () {\n        let vendors = this.state.vendorMatches;\n        if(this.state.isLoading){\n            return <CircularProgress />;\n        }\n\t    else if (!this.state.currentProduct) {\n\t    \treturn <InputLabel>Please select an item.</InputLabel>;\n\t    }\n\t    else if (Object.keys(vendors).length === 0) {\n\t    \treturn <InputLabel>The item you have selected is currently out of stock at all vendors.</InputLabel>;\n\t    }\n\t    return (\n            Object.keys(vendors).map((key, index) => (\n            <ListItem>\n                <ListItemIcon>\n                <ShoppingCartIcon />\n                </ListItemIcon>\n                <ListItemText primary={key} secondary={\"Price: $\" + vendors[key].price + \", Quantity: \" + vendors[key].quantity} />\n            </ListItem>\n            ))\n        );\n\t}\n\n    render () {\n        return (\n            <Grid\n\t\t  container\n\t\t  direction=\"column\"\n\t\t  justify=\"center\"\n\t\t  alignItems=\"center\"\n\t\t>\n\t\t<Typography variant=\"h2\" gutterBottom>\n\t\tFoodFinder\n\t      </Typography>\n            <InputLabel id=\"demo-simple-select-label\">Available Products</InputLabel>\n    \n            <Autocomplete\n                id=\"combo-box-demo\"\n                options={productsList}\n                style={{ width: 300,\n                    justifyContent: \"center\",\n                    alignItems: \"center\" }}\n                onChange={(event, newValue) => {\n                    this.selectedProduct(newValue);\n                }}\n                renderInput={(params) => <TextField {...params} variant=\"outlined\" />}\n            />\n            <List>\n            {this.getVendorList()}\n            </List>\n        \n        </Grid>\n          );\n    }\n\n}\n\nexport default FoodFinderHome;\n","\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport FoodFinderHome from \"./FoodFinderHome.js\";\n\nReactDOM.render(<FoodFinderHome />, document.getElementById(\"root\"));"],"sourceRoot":""}